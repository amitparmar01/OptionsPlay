#ifndef __KCBPPACKETOPEXPORT_H__
#define __KCBPPACKETOPEXPORT_H__

#if defined (WIN32)
	#if defined(KCBPPACKETOP_EXPORTS)
		#define KCBPPACKETOP_API __declspec(dllexport)
	#else
		#define KCBPPACKETOP_API __declspec(dllimport)
	#endif
	#define KCBPPACKETOPSTDCALL //__stdcall   /* ensure stcall calling convention on NT */	
	#define KCBPPACKETOPEXPORTS __declspec(dllexport)
#else
	#define KCBPPACKETOP_API
	#define KCBPPACKETOPSTDCALL            /* leave blank for other systems */
	#define KCBPPACKETOPEXPORTS
#endif

#define KCBPOPHANDLE void*

#ifdef __cplusplus
extern "C" {
#endif

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_Init( KCBPOPHANDLE *hKCBPOp );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_Exit( KCBPOPHANDLE hKCBPOp );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_PutKCBPPacket( KCBPOPHANDLE hKCBPOp, void *pComm, int nLen );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetKCBPPacket( KCBPOPHANDLE hKCBPOp, void *pCommBuf, int pCommBufLen, int *nLen);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetKCBPPacketLen(KCBPOPHANDLE hKCBPOp);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValue( KCBPOPHANDLE hKCBPOp, char *KeyName, char *Value, int Num );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetValueStr( KCBPOPHANDLE hKCBPOp, char *KeyName, char *Value );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueInt( KCBPOPHANDLE hKCBPOp, char *KeyName, int &Value);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetValueInt( KCBPOPHANDLE hKCBPOp, char *KeyName, int Value );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueInt64( KCBPOPHANDLE hKCBPOp, char *KeyName, __int64 &Value);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetValueInt64( KCBPOPHANDLE hKCBPOp, char *KeyName, __int64 Value );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueDbl( KCBPOPHANDLE hKCBPOp, char *KeyName, __int64 &Value);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetValueDbl( KCBPOPHANDLE hKCBPOp, char *KeyName, __int64 Value );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueChr( KCBPOPHANDLE hKCBPOp, char *KeyName, char &Value);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetValueChr( KCBPOPHANDLE hKCBPOp, char *KeyName, char Value );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueNum(KCBPOPHANDLE hKCBPOp);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueByIndex(KCBPOPHANDLE hKCBPOp, int nIdx, char *Value, int nValueLen);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueNameByIndex(KCBPOPHANDLE hKCBPOp, int nIdx, char *KeyName, int nNameLen);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetValueAndNameByIndex(KCBPOPHANDLE hKCBPOp, int nIdx, char *KeyName, int nNameLen, char *Value, int nValueLen );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetVal( KCBPOPHANDLE hKCBPOp, char *szKeyName, unsigned char *pValue, long nSize);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetVal( KCBPOPHANDLE hKCBPOp, char *szKeyName, unsigned char **pValue, long *pSize);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetErr( KCBPOPHANDLE hKCBPOp, int *ErrCode,char *ErrMsg, int nErrMsgLen);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetErrorCode( KCBPOPHANDLE hKCBPOp, int *nErrno);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetErrorMsg( KCBPOPHANDLE hKCBPOp, char *ErrMsg, int nErrMsgLen);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsCreate( KCBPOPHANDLE hKCBPOp, char *Name, int ColNum,char *pColInfo);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsNewTable( KCBPOPHANDLE hKCBPOp, char *Name, int ColNum,char *pColInfo);

KCBPPACKETOP_API void KCBPPACKETOPSTDCALL KCBPOP_RsSetResultSet( KCBPOPHANDLE hKCBPOp, int nResultSet );
KCBPPACKETOP_API void KCBPPACKETOPSTDCALL KCBPOP_RsSetRowNum( KCBPOPHANDLE hKCBPOp, int nRsRowNum );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsAddRow( KCBPOPHANDLE hKCBPOp );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSaveRow( KCBPOPHANDLE hKCBPOp );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsFetchRow( KCBPOPHANDLE hKCBPOp );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsOpen( KCBPOPHANDLE hKCBPOp );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsMore( KCBPOPHANDLE hKCBPOp );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsClose( KCBPOPHANDLE hKCBPOp );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColNames( KCBPOPHANDLE hKCBPOp, char *pszInfo, int nLen);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColName( KCBPOPHANDLE hKCBPOp, int nCol, char * szName, int nLen);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetCursorName( KCBPOPHANDLE hKCBPOp, char * pszCursorName, int nLen);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColByIndex( KCBPOPHANDLE hKCBPOp, int Col, char *Vlu);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColByIndex( KCBPOPHANDLE hKCBPOp, int Col, char *Vlu, int nVluLen);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColByName( KCBPOPHANDLE hKCBPOp, char *KeyName, char *Vlu);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColByName( KCBPOPHANDLE hKCBPOp, char *KeyName, char *Vlu, int nVluLen);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColByNameInt( KCBPOPHANDLE hKCBPOp, char *KeyName, int Vlu);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColByNameInt( KCBPOPHANDLE hKCBPOp, char *KeyName, int &Vlu);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColByNameInt64( KCBPOPHANDLE hKCBPOp, char *KeyName, __int64 Vlu);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColByNameInt64( KCBPOPHANDLE hKCBPOp, char *KeyName, __int64 &Vlu);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColByNameDbl( KCBPOPHANDLE hKCBPOp, char *KeyName, double Vlu);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColByNameDbl( KCBPOPHANDLE hKCBPOp, char *KeyName, double &Vlu);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColByNameChr( KCBPOPHANDLE hKCBPOp, char *KeyName, char Vlu);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColByNameChr( KCBPOPHANDLE hKCBPOp, char *KeyName, char &Vlu);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetColNameList( KCBPOPHANDLE hKCBPOp, char *ColName);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetValByIndex(KCBPOPHANDLE hKCBPOp, int nColumnIndex, unsigned char *pValue, long nSize);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsSetValByName(KCBPOPHANDLE hKCBPOp, char *szColumnName, unsigned char *pValue, long nSize);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetValByIndex(KCBPOPHANDLE hKCBPOp, int nColumnIndex, unsigned char **pValue, long *pSize);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetValByName(KCBPOPHANDLE hKCBPOp, char *szColumnName, unsigned char **pValue, long *pSize);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetRowNum( KCBPOPHANDLE hKCBPOp, int *nRows);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetColNum( KCBPOPHANDLE hKCBPOp, int *nCols);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetTableColNum( KCBPOPHANDLE hKCBPOp, int nt, int *nCols);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_RsGetTableRowNum( KCBPOPHANDLE hKCBPOp, int nt, int *nRows);

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_BeginWrite( KCBPOPHANDLE hKCBPOp );
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_EndWrite( KCBPOPHANDLE hKCBPOp );

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetCommLen( KCBPOPHANDLE hKCBPOp, int *nLen);

KCBPPACKETOP_API bool KCBPPACKETOPSTDCALL KCBPOP_EndOfTran( KCBPOPHANDLE hKCBPOp );		//判断交易是否结束

KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_SetSystemParam( KCBPOPHANDLE hKCBPOp, int nParam, char *pszBuffer);
KCBPPACKETOP_API int KCBPPACKETOPSTDCALL KCBPOP_GetSystemParam( KCBPOPHANDLE hKCBPOp, int nParam, char *pszBuffer, int nBufSize);
KCBPPACKETOP_API void KCBPPACKETOPSTDCALL KCBPOP_FreeCommArea( KCBPOPHANDLE hKCBPOp );

#ifdef __cplusplus
}
#endif

#endif